{"version":3,"sources":["components/InputForm/InputForm.js","components/Post/Post.js","components/PostListing/PostListing.js","App.js","serviceWorker.js","index.js"],"names":["InputForm","state","postPicUrl","postTitle","handleInputChange","event","value","target","name","_this","setState","Object","defineProperty","handleFormSubmit","preventDefault","props","newPostHandler","react_default","a","createElement","className","this","onChange","type","placeholder","onClick","Component","Post","src","alt","PostListing","posts","map","post","index","components_Post_Post","key","App","feed","handleNewPost","currentState","concat","toConsumableArray","components_InputForm_InputForm","components_PostListing_PostListing","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4UA0DeA,oNArDbC,MAAQ,CACNC,WAAY,GACZC,UAAW,MAGbC,kBAAoB,SAAAC,GAElB,IAAIC,EAAQD,EAAME,OAAOD,MACnBE,EAAOH,EAAME,OAAOC,KAG1BC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACGH,EAAOF,OAIZO,iBAAmB,SAAAR,GAEjBA,EAAMS,iBAGNL,EAAKM,MAAMC,eAAe,CAACd,WAAYO,EAAKR,MAAMC,WAAYC,UAAWM,EAAKR,MAAME,YAEpFM,EAAKC,SAAS,CACZR,WAAY,GACZC,UAAW,8EAKb,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOb,MAAOe,KAAKpB,MAAMC,WAAYM,KAAK,aAAac,SAAUD,KAAKjB,kBAAmBmB,KAAK,OAAOH,UAAU,eAAeI,YAAY,eAE5IP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOb,MAAOe,KAAKpB,MAAME,UAAWK,KAAK,YAAYc,SAAUD,KAAKjB,kBAAmBmB,KAAK,OAAOH,UAAU,eAAeI,YAAY,WAE1IP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAQM,QAASJ,KAAKR,iBAAkBO,UAAU,mBAAlD,wBA5CQM,cCSTC,eATF,SAACZ,GAAD,OACZE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDACfH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcL,EAAMZ,WACjCc,EAAAC,EAAAC,cAAA,OAAKS,IAAKb,EAAMb,WAAY2B,IAAKd,EAAMZ,gBCK5B2B,EARK,SAACf,GAAD,OACnBE,EAAAC,EAAAC,cAAA,WACEJ,EAAMgB,MAAMC,IAAI,SAACC,EAAMC,GACnB,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,CAAMjC,WAAY+B,EAAK,GAAI9B,UAAW8B,EAAK,GAAIG,IAAKF,QCqBnDG,6MArBbpC,MAAQ,CACNqC,KAAM,MAGRC,cAAgB,SAAAN,GACdxB,EAAKC,SAAU,SAAA8B,GAAY,MAAK,CAC9BF,KAAI,GAAAG,OAAA9B,OAAA+B,EAAA,EAAA/B,CAAM6B,EAAaF,MAAnB,CAAyB,CAACL,EAAK/B,WAAY+B,EAAK9B,yFAKtD,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAACwB,EAAD,CAAW3B,eAAgBK,KAAKkB,gBAChCtB,EAAAC,EAAAC,cAACyB,EAAD,CAAab,MAAOV,KAAKpB,MAAMqC,eAjBrBZ,aCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1ab165c0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./InputForm.css\";\n\nclass InputForm extends Component {\n  // Setting the component's initial state\n  state = {\n    postPicUrl: \"\",\n    postTitle: \"\",\n  };\n\n  handleInputChange = event => {\n    // Getting the value and name of the input which triggered the change\n    let value = event.target.value;\n    const name = event.target.name;\n\n    // Update the input's state\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleFormSubmit = event => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    event.preventDefault();\n\n    // console.log(this.state.postPicUrl + \" \" + this.state.postTitle);\n    this.props.newPostHandler({postPicUrl: this.state.postPicUrl, postTitle: this.state.postTitle});\n\n    this.setState({\n      postPicUrl: \"\",\n      postTitle: \"\"\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"row p-2\">\n        <div className=\"col-md-8 offset-md-2 offset-md-right-2\">\n          <form>\n            <div className=\"form-group\">\n              <input value={this.state.postPicUrl} name=\"postPicUrl\" onChange={this.handleInputChange} type=\"text\" className=\"form-control\" placeholder=\"Enter URL\" />\n            </div>\n            <div className=\"form-group row\">\n              <div className=\"col-md-10\">\n                <input value={this.state.postTitle} name=\"postTitle\" onChange={this.handleInputChange} type=\"text\" className=\"form-control\" placeholder=\"Title\" />\n              </div>\n              <div className=\"col-md-2\">\n                <button onClick={this.handleFormSubmit} className=\"btn btn-primary\">New Post</button>\n              </div>\n            </div>\n\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default InputForm;\n","import React from \"react\";\nimport \"./Post.css\";\n\nconst Post = (props) => (\n\t<div className=\"row p-2\">\n\t\t\t<div className=\"col-md-8 offset-md-2 offset-md-right-2 p-2 post\">\n\t\t\t<h2 className=\"post-title\">{props.postTitle}</h2>\n\t  \t<img src={props.postPicUrl} alt={props.postTitle} />\n\t  </div>\n  </div>\n);\n\nexport default Post;","import React from \"react\";\nimport \"./PostListing.css\";\nimport Post from \"../Post\";\n\nconst PostListing = (props) => (\n\t<div>\n\t\t{props.posts.map((post, index) => {\n\t      return <Post postPicUrl={post[0]} postTitle={post[1]} key={index}/>\n\t    })}\n  </div>\n);\n\nexport default PostListing;","import React, { Component } from 'react';\nimport './App.css';\nimport InputForm from \"./components/InputForm\";\nimport PostListing from \"./components/PostListing\";\n\nclass App extends Component {\n  // Setting the component's initial state\n  state = {\n    feed: []\n  };\n\n  handleNewPost = post => {\n    this.setState( currentState => ({\n      feed: [...currentState.feed, [post.postPicUrl, post.postTitle]]\n    }));\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Social Media Feed App</h1>\n        <InputForm newPostHandler={this.handleNewPost}/>\n        <PostListing posts={this.state.feed} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}